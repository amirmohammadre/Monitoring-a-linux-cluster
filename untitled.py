# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


"""
Import libraries
"""
from PyQt5 import QtCore, QtGui, QtWidgets
from cProfile import label
from termcolor import colored
from email.message import EmailMessage
from multiprocessing import Process
import matplotlib.pyplot as plt
import numpy as np
import time as tm
import mysql.connector
import socket
import smtplib
import asyncore
import re
import os




class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(837, 512)
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(0, -10, 861, 521))
        self.widget.setStyleSheet("QWidget#widget{\n"
"background-color:qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(21, 21, 21, 255), stop:1 rgba(48, 27, 63, 255))}")
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(80, 40, 131, 51))
        self.label.setStyleSheet("font: 75 18pt \"Waree\";\n"
"color:rgb(255, 255, 255);  \n"
"")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(110, 150, 51, 51))
        self.label_2.setStyleSheet("font: 75 18pt \"Waree\";\n"
"color:rgb(255, 255, 255);  \n"
"")
        self.label_2.setObjectName("label_2")
        self.ip = QtWidgets.QLineEdit(self.widget)
        self.ip.setGeometry(QtCore.QRect(40, 100, 201, 31))
        self.ip.setObjectName("ip")
        self.port = QtWidgets.QLineEdit(self.widget)
        self.port.setGeometry(QtCore.QRect(40, 200, 201, 31))
        self.port.setObjectName("port")
        self.run = QtWidgets.QPushButton(self.widget)
        self.run.setGeometry(QtCore.QRect(90, 270, 89, 25))
        self.run.setObjectName("run")
        self.tabWidget = QtWidgets.QTabWidget(self.widget)
        self.tabWidget.setGeometry(QtCore.QRect(270, 10, 571, 391))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.output_general = QtWidgets.QTextBrowser(self.tab)
        self.output_general.setGeometry(QtCore.QRect(0, -10, 571, 371))
        self.output_general.setObjectName("output_general")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.output_graph = QtWidgets.QTextBrowser(self.tab_2)
        self.output_graph.setGeometry(QtCore.QRect(0, -10, 571, 381))
        self.output_graph.setObjectName("output_graph")
        self.tabWidget.addTab(self.tab_2, "")
        self.log = QtWidgets.QTextBrowser(self.widget)
        self.log.setGeometry(QtCore.QRect(0, 401, 841, 121))
        self.log.setObjectName("log")

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        self.run.clicked.connect(self.get_data) 
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def get_data(self):

        self.log.append('Starting ...')
        app.processEvents()
        asyncore.loop( )

        #-----------------------------------------------------------------------------------------
        """
        establishing the connection
        """
        def Connect_to_mysql():
                
                try:
                        global cnx
                        cnx = mysql.connector.connect(user = 'root', password = 'a1800', host = '127.0.0.1')
                except Exception as err:
                        self.log.append("[-] I Can Not Connect To MySQL Database !! :( %s" % str(err))
                        exit()
                else:    
                        global cursor
                        cursor = cnx.cursor()
        
        #-----------------------------------------------------------------------------------------
        """
        Create a database to store the values taken
        """
        def Create_database():

                database_name = "Pacemaker"

                cursor.execute("CREATE DATABASE IF NOT EXISTS {}".format(database_name))
                cursor.execute("USE {}".format(database_name)) 

        #-----------------------------------------------------------------------------------------
        """
        Create a table in the database
        """
        def Create_table():  

                table_name = "Status"

                sql = """CREATE TABLE IF NOT EXISTS %s (ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                Date_And_Time VARCHAR(25) NOT NULL, Status INT NOT NULL);""" % (table_name)
                
                cursor.execute(sql)
                return table_name

        #-----------------------------------------------------------------------------------------
        """
        Insert the values into the MySQL database
        """
        def Insert_values(table_name, date_and_time, int_val_message_status):

                cursor.execute("INSERT INTO {} (Date_And_Time, Status) VALUES (\"%s\", \"%s\")".format(table_name) 
                % (date_and_time, int_val_message_status))
                
                cnx.commit()

        #-----------------------------------------------------------------------------------------
        """
        Show service status graphically
        """
        def Visualize_data(message_status, date_and_time):   

                Values_msg = np.array([]) 
                Values_msg = np.append(Values_msg, message_status)

                date_and_time_output   = re.findall("..:.*", date_and_time)
                final_result_date_time =  ''.join(date_and_time_output)

                Values_date_time = np.array([])
                Values_date_time = np.append(Values_date_time, final_result_date_time)

                plt.bar(Values_date_time, Values_msg, label = "Status")
                plt.title("Status Pacemaker Service")
                plt.xlabel('Date and time')
                plt.ylabel('Status')

        #-----------------------------------------------------------------------------------------
        """
        Send email if the service is interrupted
        """
        def Send_email(date_and_time):

                EMAIL_HOST          = 'smtp.gmail.com'
                EMAIL_HOST_USER     = 'amirmohammadrezvaninia@gmail.com'
                EMAIL_HOST_PASSWORD = 'mbtzvraxgoamjuof'
                EMAIL_PORT_SSL      = 465

                msg = EmailMessage()
                msg['Subject'] = 'Monitoring Cluster Linux => Severity: High'
                msg['From']    = EMAIL_HOST_USER
                msg['To']      = 'amirtestone@gmail.com'
                msg.set_content('Pacemaker service is down at this time: {} '.format(date_and_time))

                with open('resolve.txt', 'r') as f:
                        file_data = f.read()

                msg.add_attachment(file_data, subtype = 'txt', filename = 'resolve.txt')

                with smtplib.SMTP_SSL(EMAIL_HOST, EMAIL_PORT_SSL) as server:
                        server.login(EMAIL_HOST_USER, EMAIL_HOST_PASSWORD)
                        server.send_message(msg)

        #-----------------------------------------------------------------------------------------
        """
        Get values form target node
        """
        def Get_values():

                for count in range(0,5,1):
                        
                        date_and_time  = target.recv(1024).decode('utf-8') 
                        message_status = target.recv(1024).decode('utf-8')

                        int_val_message_status = int(message_status)

                        print("test mesg")
                        self.output_general.append(f">>> Date And Time: { date_and_time }")
                        self.output_general.append(f">>> Status Service Pacemaker: { int_val_message_status }")
                        
                        #Execution of the function of pouring values into MySQL
                        P1 = Process(target = Insert_values, args = (table_name, date_and_time, int_val_message_status,))
                        P1.start()
                        P1.join()
                        
                        #Execute function visualize data
                        # P2 = Process(target = Visualize_data, args = (message_status,))
                        # P2.start()
                        # P2.join()

                        Visualize_data(message_status, date_and_time)


                        if int_val_message_status == 1:
                                self.output_general.append(colored(f"\n[+] Service Is Up And Running :)", 'green'))
                        else:
                                self.output_general.append(colored(f"\n[-] Service Is Down :(", 'red'))
                        
                                #Execute function send mail
                                # P3 = Process(target = Send_email, args = (date_and_time,))
                                # P3.start()
                                # P3.join()

                        self.output_general.append('\n*********************************************')

        #-----------------------------------------------------------------------------------------
        """
        This function for listening incoming connections and established connections created
        """
        def Server():

                #Variables used in established connections
                global s
                global ip
                global target

                try:
                        app.processEvents()
                        s = self.socket.self.socket(self.socket.AF_INET, self.socket.SOCK_STREAM)
                        self.s.self.setsockopt(self.socket.SOL_SOCKET, self.socket.SO_REUSEADDR, 1)
                        
                        ip_address = self.ip.text()
                        port = self.port.text()
                        
                        self.s.bind((ip_address, port))
                        self.s.listen(5)

                        self.log.append(colored("[+] Listening For Incoming Connections", 'green'))
                        app.processEvents()

                        target, ip = s.accept()

                        self.log.append(colored("[+] Connection Established From: %s" % str(ip), 'blue'))

                except Exception as err:
                        self.log.append("[-] I Can Not Listening For Incoming Connections !! :( %s" % str(err))
                        exit()

        #-----------------------------------------------------------------------------------------

        Connect_to_mysql()
        Create_database()
        table_name = Create_table()

        # Pserver = Process(target = Server)
        # Pserver.start()
        # Pserver.join()

        
        
        Server()
        Get_values()

        cnx.close()

        # self.output_graph.setText(plt.show())


        s.close()
        
        self.output_graph.setText(plt.show())


        self.log.append('Done :D')



    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Pacemaker service monitoring"))
        self.label.setText(_translate("Dialog", "IP Address"))
        self.label_2.setText(_translate("Dialog", "Port"))
        self.ip.setText(_translate("Dialog", "192.168.60.1"))
        self.port.setText(_translate("Dialog", "54321"))
        self.run.setText(_translate("Dialog", "Run"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Dialog", "General Info"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "Graph"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())







